# -*- coding: utf-8 -*-
"""LPR_Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XelfNk9pAwscLVwC0WILrMJT5epKGidY
"""

!pip install easyocr

pip install opencv-python==4.5.4.60

pip install opencv-contrib-python==4.5.4.60

# import required module
import glob

# get the path/directory
folder_dir = '/content/drive/MyDrive/MLproject/automatic-number-plate-recognition/test_images'

# iterate over files in
# that directory
for images11 in glob.iglob(f'{folder_dir}/*'):

	# check if the image ends with png
	if (images11.endswith(".jpg")):
		#print(images11)
		im = cv2.imread(images11)
		print(images11)
		text = LPR(im)
		if len(text)>40:
			print('car plate accuracy - 0.00 % and Impossible to read the text from the license plate')
		else:
			plt1 = text.split()
			print('car plate accuracy: ',(plt1[1]))

from easyocr import Reader
import cv2
from google.colab.patches import cv2_imshow

# load the image and resize it
image_1 = cv2.imread('/content/drive/MyDrive/MLproject/automatic-number-plate-recognition/test_images/MH12DE1433.jpg')
image_1 = cv2.resize(image_1, (800, 600))

gray = cv2.cvtColor(image_1, cv2.COLOR_BGR2GRAY) 
blur = cv2.GaussianBlur(gray, (5,5), 0) 
edged = cv2.Canny(blur, 10, 200) 
cv2_imshow(edged)
cv2.waitKey(0)
cv2.destroyAllWindows()

contours, _ = cv2.findContours(edged, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours = sorted(contours, key = cv2.contourArea, reverse = True)[:5]

# loop over the contours
for c in contours:
    # approximate each contour
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    # if the contour has 4 points, we can say
    # that we have found our license plate
    if len(approx) == 4:
        n_plate_cnt = approx
        break        

# get the bounding box of the contour and 
# extract the license plate from the image
(x, y, w, h) = cv2.boundingRect(n_plate_cnt)
license_plate = gray[y:y + h, x:x + w]

cv2_imshow(license_plate)
cv2.waitKey(0)
cv2.destroyAllWindows()

reader = Reader(['en'])
# detect the text from the license plate
detection = reader.readtext(license_plate)

if len(detection) == 0:
    # if the text couldn't be read, show a custom message
    text = "Impossible to read the text from the license plate"
    cv2.putText(image_1, text, (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 0, 255), 3)
    cv2_imshow(image_1)
    cv2.waitKey(0)
else:
    # draw the contour and write the detected text on the image
    cv2.drawContours(image_1, [n_plate_cnt], -1, (0, 255, 0), 3)
    text = f"{detection[0][1]} {detection[0][2] * 100:.2f}%"
    cv2.putText(image_1, text, (x, y - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 255, 0), 2)
    # display the license plate and the output image
    cv2_imshow(license_plate)
    cv2_imshow(image_1)
    cv2.waitKey(0)

plt1 = text.split()
print('car plate accuracy: ',(plt1[2]))
#plt1